{
  "body": "Automatic Key Rotation is available in Public Preview. The currently supported applications are Key Vault, Managed Disks, and Storage accounts, which allow access to keys within Key Vault. The number of supported applications will incrementally increase.\n\n### Rationale\n\nOnce set up, Automatic Private Key Rotation removes the need for manual administration when keys expire at intervals determined by your organization's policy. The recommended key lifetime is 2 years. Your organization should determine its key expiration policy.\n\n### Impact\n\nThere are additional costs per operation in running the needed applications.",
  "name": "Ensure Automatic Key Rotation is Enabled Within Azure Key Vault for the Supported Services",
  "slug": "azure-key-vault-automatic-key-rotation",
  "isInsight": false,
  "alertForSecondaryOnly": false,
  "rules": [
    {
      "isManual": false,
      "cloudProviders": [
        "azure"
      ],
      "comparator": "eq",
      "expectedResult": "[]",
      "subjects": [
        "KMSKey"
      ],
      "query": "azure-key-vault-keys-without-automatic-rotation"
    }
  ],
  "remediationDescription": "**Note:**\nAzure CLI and Powershell use ISO8601 flags to input timespans. Every timespan input will be in the `P<timespanInISO8601Format>(Y,M,D)` format. The leading P is required with it denoting `period`. The (Y,M, and D) are for Year, Month, and Day, respectively. A time frame of 2 years, 2 months, 2 days would be (P2Y2M2D).\n\n### Remediate from Azure Portal\n\n1. Open the key using the `Open in Azure` button.\n5. Select a key to audit.\n6. In the top row, select `Rotation policy`. \n7. Select an `Expiry time`.\n8. Set `Enable auto rotation` to `Enabled`.\n9. Set an appropriate `Rotation option` and `Rotation time`.\n10. Optionally set the `Notification time`.\n11. Select `Save`.\n12. Repeat steps 3-11 for each Key Vault and Key.\n\n### Remediate from Azure CLI\n\nRun the following command for each key to update its policy to be auto-rotated:\n\n```bash\naz keyvault key rotation-policy update -n <keyName> --vault-name <vaultName> --value <path/to/policy.json>\n```\n\nNote: Supplying the policy flags in a .json file is easiest. An example JSON file would be:\n\n```json\n{\n  \"lifetimeActions\": [\n    {\n      \"trigger\": {\n        \"timeAfterCreate\": \"<timespanInISO8601Format>\", \n        \"timeBeforeExpiry\": null\n      },\n      \"action\": {\n        \"type\": \"Rotate\"\n      }\n    },\n    {\n      \"trigger\": {\n        \"timeBeforeExpiry\": \"<timespanInISO8601Format>\"\n      },\n      \"action\": {\n        \"type\": \"Notify\"\n      }\n    }\n  ],\n  \"attributes\": {\n    \"expiryTime\": \"<timespanInISO8601Format>\"\n  }\n}\n```\n\n### Remediate from PowerShell\n\nRun the following command for each key to update its policy:\n\n```powershell\nSet-AzKeyVaultKeyRotationPolicy -VaultName test-kv -Name test-key -PolicyPath rotation_policy.json\n```\n\nNote: Supplying the policy flags in a .json file is easiest. An example JSON file would be:\n\n```json\n{\n    \"lifetimeActions\": [\n      {\n        \"trigger\": {\n          \"timeAfterCreate\": \"P<timespanInISO8601Format>M\",\n          \"timeBeforeExpiry\": null\n        },\n        \"action\": {\n          \"type\": \"Rotate\"\n        }\n      },\n      {\n        \"trigger\": {\n          \"timeBeforeExpiry\": \"P<timespanInISO8601Format>D\"\n        },\n        \"action\": {\n          \"type\": \"Notify\"\n        }\n      }\n    ],\n    \"attributes\": {\n      \"expiryTime\": \"P<timespanInISO8601Format>Y\"\n    }\n  }\n```",
  "isEnabled": true,
  "severity": 2
}
