{"name":"Ensure SQL server's TDE protector is encrypted with Customer-managed key","slug":"azure-1-3-0-database-5","body":"TDE with Customer-managed key support provides increased transparency and control over the TDEProtector, increased security with an HSM-backed external service, and promotion of separation of duties.With TDE, data is encrypted at rest with a symmetric key (called the database encryption key) stored in the database or data warehouse distribution. To protect this data encryption key (DEK) in the past, only a certificate that the Azure SQL Service managed could be used. Now, with Customer-managed key support for TDE, the DEK can be protected with an asymmetric key that is stored in the Key Vault. KeyVault is a highly available and scalable cloud-based key store which offers central key management, leverages FIPS 140-2 Level 2 validated hardware security modules (HSMs), and allows separation of management of keys and data, for additional security.Based on business needs or criticality of data/databases hosted a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (Customer-managed key).\n\n**Rationale**\n\nCustomer-managed key support for Transparent DataEncryption (TDE) allows user control of TDE encryption keys and restricts who can access them and when. Azure Key Vault, Azureâ€™s cloud-based external key management system is the first key management service where TDE has integrated support for Customer-managed keys. With Customer-managed key support, the database encryption key is protected by an asymmetric key stored in the Key Vault. The asymmetric key is set at the server level and inherited by all databases under that server.\n\n**Impact**\n\nOnce TDE protector is encrypted with a Customer-managed key, it transfers entire responsibility of respective key management on to you and hence you should be more careful about doing any operations on the particular key in order to keep data from corresponding SQL server and Databases hosted accessible.\nWhen deploying Customer Managed Keys it is also prudent to ensure that you also deploy an automated toolset for managing these keys (this should include discovery and key rotation), and Keys should be stored in an HSM or hardware backed keystore E.G. Azure Keyvault).As far as toolsets go, check with your cryptographic key provider as they may well provide one as an add on to their service.","description":"","severity":1,"remediationDescription":"**From Azure Console**\n\nGo to `SQL servers` \nFor the desired server instance\n\n1. Click On `Transparent data encryption`\n2. Set `Use your own key` to `YES`\n3. Browse through your `key vaults` to Select an existing key or create a new key in Key Vault.\n4. Check `Make selected key the default TDE protector`\n\n**Using Azure CLI**\n\nUse the below command to encrypt SQL server's TDE protector with a Customer-managed key\n\n```bash\naz sql server tde-key \u003e\u003e Set --resource-group \u003cresourceName\u003e --server \u003cdbServerName\u003e --server-key-type {AzureKeyVault} [--kid \u003ckeyIdentifier\u003e]```\n\n**Default Value**\n\nBy Default, Microsoft managed TDE protector is enabled for a SQL server. By default option 'Use your own key' is set to 'ON'.\n\n**References**\n\n1. [https://docs.microsoft.com/en-us/sql/relational-databases/security/encryption/transparent-data-encryption-byok-azure-sql](https://docs.microsoft.com/en-us/sql/relational-databases/security/encryption/transparent-data-encryption-byok-azure-sql)\n2. [https://azure.microsoft.com/en-in/blog/preview-sql-transparent-data-encryption-tde-with-bring-your-own-key-support/](https://azure.microsoft.com/en-in/blog/preview-sql-transparent-data-encryption-tde-with-bring-your-own-key-support/)\n3. [https://winterdom.com/2017/09/07/azure-sql-tde-protector-keyvault](https://winterdom.com/2017/09/07/azure-sql-tde-protector-keyvault)\n4. [https://docs.microsoft.com/en-us/azure/security/benchmarks/security-controls-v2-identity-management#im-1-standardize-azure-active-directory-as-the-central-identity-and-authentication-system](https://docs.microsoft.com/en-us/azure/security/benchmarks/security-controls-v2-identity-management#im-1-standardize-azure-active-directory-as-the-central-identity-and-authentication-system)\n\n**Additional Information**\n\n- This configuration is audited or can be done only on SQL server. The same configuration will be in effect on SQL Databases hosted on SQL Server.\n- Ensuring TDE is protected by a Customer-managed key on SQL Server does not ensures the encryption of SQL Databases. `Transparent Data Encryption : Data Encryption (ON/OFF) setting` on individual SQL Database decides whether database is encrypted or not.","rules":[{"cloudProviders":["azure"],"comparator":"eq","expectedResult":"[]","subjects":["SQLServer"],"query":"azure-1-3-0-database-5-sql-servers-tde-protector-is-encrypted-with-customer-managed-key","returnPath":""}]}