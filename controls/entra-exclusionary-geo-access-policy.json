{
  "body": "Conditional Access Policies can be used to block access from geographic locations that are deemed out-of-scope for your organization or application. The scope and variables for this policy should be carefully examined and defined.\n\n### Rationale\n\nConditional Access, when used as a deny list for the tenant or subscription, is able to prevent ingress or egress of traffic to countries that are outside of the scope of interest (e.g., customers, suppliers) or jurisdiction of an organization. This is an effective way to prevent unnecessary and long-lasting exposure to international threats such as APTs.\n\n### Impact\n\nMicrosoft Entra ID P1 or P2 is required. Limiting geographical access will deny access to users traveling or working remotely in a different part of the world. A point-to-site or site-to-site tunnel, such as a VPN, is recommended to address exceptions to geographic access policies.\n\n### Default Value\n\nNo policies are configured by default.\n\n### Additional Information\n\nThese policies should be tested by using the What If tool in the References. Setting these can and will create issues with logging in for users until they use an MFA device linked to their accounts. Further testing can be done via the insights and reporting resource in References, which monitors Azure sign-ins.",
  "name": "Ensure an exclusionary Geographic Access Policy is considered",
  "slug": "entra-exclusionary-geo-access-policy",
  "isInsight": false,
  "alertForSecondaryOnly": false,
  "rules": [
    {
      "cloudProviders": [
        "entra"
      ],
      "comparator": "eq",
      "expectedResult": "[]",
      "subjects": [
        "Connector"
      ],
      "query": "entra-exclusionary-geo-access-policy"
    }
  ],
  "remediationDescription": "### From Azure Portal\n\n#### Part 1 of 2 - Create the policy and enable it in `Report-only` mode.\n\n1. Open [Conditional Access | Overview](https://portal.azure.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Overview)\n4. Click the `+ New policy` button, then:\n5. Provide a name for the policy.\n6. Under `Assignments`, select `Users` then:\n   - Under `Include`, select `All users`\n   - Under `Exclude`, check `Users and groups` and only select emergency access accounts\n7. Under `Target resources`, select `Cloud apps` then:\n   - Under `Include`, select `All cloud apps`\n   - Leave `Exclude` blank unless you have a well defined exception.\n8. Under `Conditions`, select `Locations` then:\n   - Select `Include`, then add entries for locations for those that should be blocked.\n   - Select `Exclude`, then add entries for those that should be allowed (**IMPORTANT:** Ensure that all Trusted Locations are in the `Exclude` list.)\n9. Under `Access Controls`, select `Grant` and Confirm that `Block Access` is selected.\n10. Set `Enable policy` to `Report-only`.\n11. Click `Create`.\n\n**NOTE:** The policy is not yet 'live,' since `Report-only` is being used to audit the effect of the policy.\n\nPart 2 of 2 - Confirm that the policy is not blocking access that should be granted, then toggle to `On`.\n\n1. With your policy now in report-only mode, return to the Microsoft Entra blade and click on `Sign-in logs`.\n2. Review the recent sign-in events - click an event then review the event details (specifically the `Report-only` tab) to ensure:\n   - The sign-in event you're reviewing occurred **after** turning on the policy in report-only mode.\n   - The policy name from step 5 above is listed in the `Policy Name` column.\n   - The `Result` column for the new policy shows that the policy was `Not applied` (indicating the location origin was not blocked).\n3. If the above conditions are present, navigate back to the policy name in Conditional Access and open it.\n4. Toggle the policy from `Report-only` to `On`.\n5. Click `Save`.\n\n### From PowerShell\n\nFirst, set up the conditions object values before updating an existing conditional access policy or before creating a new one. You may need to use additional PowerShell cmdlets to retrieve specific IDs, such as the `Get-AzureADMSNamedLocationPolicy`, which outputs the `Location IDs` for use with conditional access policies.\n\n```bash\n$conditions = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n\n$conditions.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition $conditions.Applications.IncludeApplications = <\"All\" | \"Office365\" | \"app ID\" | @(\"app ID 1\", \"app ID 2\", etc...> $conditions.Applications.ExcludeApplications = <\"Office365\" | \"app ID\" | @(\"app ID 1\", \"app ID 2\", etc...)>\n\n$conditions.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition $conditions.Users.IncludeUsers = <\"All\" | \"None\" | \"GuestsOrExternalUsers\" | \"Specific User ID\" | @(\"User ID 1\", \"User ID 2\", etc.)> $conditions.Users.ExcludeUsers = <\"GuestsOrExternalUsers\" | \"Specific User ID\" | @(\"User ID 1\", \"User ID 2\", etc.)>\n$conditions.Users.IncludeGroups = <\"group ID\" | \"All\" | @(\"Group ID 1\", \"Group ID 2\", etc...)>\n$conditions.Users.ExcludeGroups = <\"group ID\" | @(\"Group ID 1\", \"Group ID 2\", etc...)>\n$conditions.Users.IncludeRoles = <\"Role ID\" | \"All\" | @(\"Role ID 1\", \"Role ID 2\", etc...)>\n$conditions.Users.ExcludeRoles = <\"Role ID\" | @(\"Role ID 1\", \"Role ID 2\", etc...)>\n\n$conditions.Locations = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessLocationCondition $conditions.Locations.IncludeLocations = <\"Location ID\" | @(\"Location ID 1\", \"Location ID 2\", etc...) >\n$conditions.Locations.ExcludeLocations = <\"AllTrusted\" | \"Location ID\" | @(\"Location ID 1\", \"Location ID 2\", etc...)>\n\n\n$controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls $controls._Operator = \"OR\"\n$controls.BuiltInControls = \"block\"\n```\n\nNext, update the existing conditional access policy with the condition set options configured with the previous commands.\n\n```bash\nSet-AzureADMSConditionalAccessPolicy -PolicyId <policy ID> -Conditions $conditions -GrantControls $controls\n```\n\nTo create a new conditional access policy that complies with this best practice, run the following commands after creating the condition set above\n\n```bash\nNew-AzureADMSConditionalAccessPolicy -Name \"Policy Name\" -State <enabled|disabled> -Conditions $conditions -GrantControls $controls\n```",
  "isEnabled": true,
  "severity": 1
}
