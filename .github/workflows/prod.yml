name: Deploy to prod

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    name: Semantic Release
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 'Semantic Release'
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allow-initial-development-versions: true
          force-bump-patch-version: true
  deploy:
    runs-on: ubuntu-latest
    name: Deploy GRC to prod
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Get GRC changed files
        id: grc-changed-files
        uses: tj-actions/changed-files@v32
        with:
          since_last_remote_commit: 'true'
          files: |
            queries/**
            controls/**
            policies/**
      - name: Get MITRE changed files
        id: mitre-changed-files
        uses: tj-actions/changed-files@v32
        with:
          since_last_remote_commit: 'true'
          files: |
            mitre/**
      - name: Login
        uses: azure/login@v1
        with:
          subscription-id: ${{ vars.AZ_SUBSCRIPTION_ID }}
          tenant-id: ${{ vars.AZ_TENANT_ID }}
          client-id: ${{ vars.AZ_CLIENT_ID }}
      - name: Deploy
        uses: azure/cli@v1
        with:
          azcliversion: 2.37.0
          inlineScript: |
            for file in ${{ steps.grc-changed-files.outputs.all_changed_files }}; do
              case $(dirname $file) in
                controls)
                  type=control;;
                queries)
                  type=query;;
                policies)
                  type=policy;;
              esac

              slug=$(cat $file | jq -r '.slug')
              message=$(jq --null-input --arg blob $file --arg slug $slug --arg type $type --arg operation "modified" '{"blob": $blob, "slug": $slug, "type": $type, "operation": $operation}')

              az storage blob upload -c grc --file $file --name $file --overwrite --metadata slug=$slug --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login
              az storage message put -q grc-events --content "$(echo $message | tr -d '\r\n' | base64)" --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login
            done

            for file in ${{ steps.grc-changed-files.outputs.deleted_files }}; do
              case $(dirname $file) in
                controls)
                  type=control;;
                queries)
                  type=query;;
                policies)
                  type=policy;;
              esac

              az storage blob download -f entity.json -c grc -n $file --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login

              slug=$(cat entity.json | jq -r '.slug')
              message=$(jq --null-input --arg blob $file --arg slug $slug --arg type $type --arg operation "deleted" '{"blob": $blob, "slug": $slug, "type": $type, "operation": $operation}')

              az storage blob delete -c grc --name $file --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login
              az storage message put -q grc-events --content "$(echo $message | tr -d '\r\n' | base64)" --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login
            done

            for file in ${{ steps.mitre-changed-files.outputs.all_changed_files }}; do
              case $(dirname $file) in
                mitre/tactics)
                  type=tactic;;
                mitre/techniques)
                  type=technique;;
                mitre/mappings)
                  type=mapping;;
              esac

              mid=$(cat $file | jq -r '.mid')
              message=$(jq --null-input --arg blob $file --arg mid $mid --arg type $type --arg operation "modified" '{"blob": $blob, "mid": $mid, "type": $type, "operation": $operation}')

              az storage blob upload -c grc --file $file --name $file --overwrite --metadata slug=$slug --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login
              az storage message put -q mitre-events --content "$(echo $message | tr -d '\r\n' | base64)" --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login
            done

            for file in ${{ steps.mitre-changed-files.outputs.deleted_files }}; do
              case $(dirname $file) in
                mitre/tactics)
                  type=tactic;;
                mitre/techniques)
                  type=technique;;
                mitre/mappings)
                  type=mapping;;
              esac

              az storage blob download -f entity.json -c grc -n $file --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login

              mid=$(cat $file | jq -r '.mid')
              message=$(jq --null-input --arg blob $file --arg mid $mid --arg type $type --arg operation "modified" '{"blob": $blob, "mid": $mid, "type": $type, "operation": $operation}')

              az storage blob delete -c grc --name $file --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login
              az storage message put -q mitre-events --content "$(echo $message | tr -d '\r\n' | base64)" --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --auth-mode login
            done

            rm -f entity.json
