{"name":"Software Release and Deployment Management","slug":"software-release-deployment","body":"## Policy Statement\n\n\u003cVar keyName=\"companyName\"/\u003e uses a CMS to track change requests. A project is used to manage changes and approvals. All of the \u003cVar keyName=\"companyName\"/\u003e cloud infrastructures are maintained as code IaC (Terraform/Cloudformation/Python).\n\nFor \u003cVar keyName=\"companyName\"/\u003e to release *working software* to Production environments, Application Release Automation (ARA) tools are used to automate the deployment of applications to these environments.\n\n## Procedures\n\n\u003cProcedure slug=\"release-process\"/\u003e\n\u003cProcedure slug=\"release-deployment\"/\u003e\n\u003cProcedure slug=\"release-approval\"/\u003e\n\u003cProcedure slug=\"release-tools\"/\u003e\n\u003cProcedure slug=\"release-canary-dark\"/\u003e\n\u003cProcedure slug=\"release-emergency\"/\u003e\n\n","version":"1","isStandard":false,"enabled":true,"procedures":[{"name":"Software Release Process","slug":"release-process","body":"\u003cVar keyName=\"companyName\"/\u003e has developed a true **DevOps** culture.\n\nDevOps (development and operations) is a culture, movement, or practice that emphasizes the collaboration and communication of software development teams, security team(s), and other IT professionals while automating the process of software delivery and infrastructure changes. It aims at establishing a culture and environment where building, testing, and releasing software, can happen rapidly, frequently, and more reliably.\n\nThe purpose is to:\n\n  - Deploy more often, with fewer failures;\n  - Have faster delivery of features and resolution;\n  - Have more stability, less fear of change;\n  - Spend more time to add value versus time spent on maintenance;\n  - Align infrastructure to business features.\n\nSteps\n\n1. All features, enhancements, and bugs for software products inside \u003cVar keyName=\"companyName\"/\u003e are tracked as issues in the ticketing solution;\n1. Changes are committed in a dedicated branch named with the ticket/issue number and the title of the ticket;\n1. Continuous integration (CI) performs unit and functional tests, and if these pass, changes are accepted into the project's repository;\n1. Changes are deployed to the `development` environment where regression and end-to-end tests happen before the new code is accepted in the `develop` branch;\n1. The `testing` environment receives the new code changes, after which sample data is loaded to start performance and security tests;\n1. Continuous delivery (CD) of the code into production is done by testing the changes in pre-production environments first, an environment that mimics the production one;\n1. No changes are promoted to production without opening a ticket in the Change Management project and waiting for approval with proper sign-offs from each department involved in the process - see [Change Management Policy](/policies/change-management/show);\n1. In case of issues, IaC automation must restore a previous version of the code which was not impacting customers.","controls":null},{"name":"Deployment Plan","slug":"release-deployment","body":"As part of this process, a deployment plan will be created. The Release Manager will be responsible for creating the release and deployment plan and getting it approved by Project or Programme Board.\n\nThe plan will include:\n\n - Approach\n - Prerequisites\n - Method of Deployment\n - Configuration Items\n - Training\n - Roles and Responsibilities\n - Change Management\n     - Backout Plan\n     - Testing\n     - Communication\n - Timing and Timescales\n - Risk Management\n - Documentation\n - Related Change Requests, Known Errors and Problems\n\nFor more info, refer to the [Secure Software Development Lifecycle Policy](/policies/sdlc/show)","controls":null},{"name":"Deployment Approval","slug":"release-approval","body":"Approval is required for each change request. \u003cVar keyName=\"companyName\"/\u003e approver is either the project's Technical Development Lead or the CTO.\n\n- No software, update, patch, or feature is released with security defects or bugs (*critical* or *high* severity);\n- Open Source Software (OSS) can be introduced into \u003cVar keyName=\"companyName\"/\u003e proprietary software. The following criteria should be met:\n  - Introduced OSS must have a measurable benefit\n  - OSS must allow \u003cVar keyName=\"companyName\"/\u003e to share their application as commercial and noncommercial without any binding on the OSS license\n  - There is no equivalent \u003cVar keyName=\"companyName\"/\u003e software or solution already deployed or easily available\n  - Change requests must be written with the following details:\n    - Description\n    - Change reason\n    - Affected systems, applications, and data\n    - Version (for code, image, deployment, etc.)\n    - Security scan status and results\n    - Production environment, such as `gcp-companyName-prod`\n\n- `main` is the **ONLY** branch which will be promoted to production:\n  - main branch cannot be deleted;\n  - commits to the main branch are restricted;\n  - Merge Requests (MR)/Pull Requests (PR) can be merged only with the approval and after all the builds in the request are successful.","controls":null},{"name":"Release and Deployment Management Tools","slug":"release-tools","body":"Several key software tools underpin an effective release and deployment management process. These are subject to change as requirements and technology are updated and so specific systems are not described here. However, the main types of tools that play a significant part in the process within \u003cVar keyName=\"companyName\"/\u003e are as follows:\n\n- Release Management System: the ticketing solution;\n- Change Management System: the ticketing solution;\n- Configuration Management System: git;\n- Software Deployment Tools: CI/CD (+ artifacts repository).","controls":null},{"name":"Canary Deployments and Dark Launches","slug":"release-canary-dark","body":"Releasing features to a subset of your users or servers, seeing how they respond, and making updates to your features accordingly is a strategy \u003cVar keyName=\"companyName\"/\u003e has implemented for rapid application development.\n\nA typical dark launch begins by wrapping a new feature in a feature toggle (or feature flag). Once the feature is pushed to production, the development team (or project manager, or even marketing team) can begin turning the new version on for users, starting with a small percentage like 1% or 5% and moving up to larger percentages if everything continues running smoothly.\n\n\u003cVar keyName=\"companyName\"/\u003e makes use of **Kubernetes Canary Deployments** where possible. Canary deployment strategy involves deploying new versions of an application next to stable production versions to see how the canary version compares against the baseline before promoting or rejecting the deployment.","controls":null},{"name":"Emergency Releases","slug":"release-emergency","body":"The nature of a release is that it is often planned many months in advance as a significant amount of work will go into it. However, circumstances may arise where a set of changes needs to be grouped into a release and deployed at short notice to fix a problem with the operational service.\n\nThe following definition of an emergency release has been agreed with the business:\n\n\u003e \"A release will be considered to be an emergency if it is required to correct errors in the current release that are having a major impact on business operations.\"\n\nIn common with the urgent change management process, emergency releases will, as far as possible, be handled in the same way as normal releases but the planning, assessment, and approval will take place within a compressed timescale.\n\nThe responsibility for determining that a release should be treated as an emergency rests with the Service Manager, based on consultation with the business.\n\nSome of the less critical activities may also be carried out after the release has been rolled out. These will typically be items such as documentation. It is emphasized that these activities must still be completed even though the release was treated as an emergency.","controls":null}]}