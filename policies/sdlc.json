{"name":"Secure Software Development Lifecycle (SDLC)","slug":"sdlc","body":"## Policy Statement\n\nAll of \u003cVar keyName=\"companyName\"/\u003e's software is developed using the Agile or Continuous Integration / Continuous Delivery (CI/CD) methodology.\n\nA Software Development Lifecycle (SDLC) policy helps your company by ensuring that software goes through a testing process, is built as securely as possible, and that all development work is compliant as it relates to any regulatory guidelines and business needs.\n\nA **Secure** SDLC involves integrating security testing and other activities into an existing development process.\n\nAt \u003cVar keyName=\"companyName\"/\u003e, we foster industry-standard secure coding practices, and all software products \u003cVar keyName=\"companyName\"/\u003e produces must be *Secure by Design* and *Secure by Default*.\n\n#### Purpose\n\nThe purpose of this policy is to define requirements for establishing and maintaining baseline protection standards for company software, network devices, servers, and desktops.\n\n#### Scope\n\nThis policy applies to all users performing software development, system administration, and management of these activities within \u003cVar keyName=\"companyName\"/\u003e. This typically includes employees and contractors, as well as any relevant external parties involved in these activities. This policy must be made readily available to all involved parties.\n\nThis policy also applies to enterprise-wide systems and applications developed by \u003cVar keyName=\"companyName\"/\u003e or on behalf of \u003cVar keyName=\"companyName\"/\u003e for production environments.\n\n## Procedures\n\n\u003cProcedure slug=\"sdlc-design\"/\u003e\n\u003cProcedure slug=\"sdlc-documentation\"/\u003e\n\u003cProcedure slug=\"sdlc-coding\"/\u003e\n\u003cProcedure slug=\"sdlc-release\"/\u003e\n\u003cProcedure slug=\"sdlc-oss\"/\u003e\n\u003cProcedure slug=\"sdlc-testing\"/\u003e\n\u003cProcedure slug=\"sdlc-samm\"/\u003e\n\u003cProcedure slug=\"sdlc-review\"/\u003e\n\n","version":"1","isStandard":false,"enabled":true,"procedures":[{"name":"Planning and Designing","slug":"sdlc-design","body":"Design is the foundation of \u003cVar keyName=\"companyName\"/\u003e software development. We try to make Software and API design easy by using powerful tools for developers, architects, and product owners.\n\n\u003cVar keyName=\"companyName\"/\u003e embraces the \"spec-first development\" principle, which primarily helps us write documentation for teams at large, not just for engineering. Defining the specification before implementation also helps \u003cVar keyName=\"companyName\"/\u003e teams create better APIs by discussing and approving the final version of the interaction interface.\n\nThis design process shall include:\n\n- business and legal aspects (data protection, data handling, business impact, costs)\n- product technical architecture design (features, components, technologies)\n- software security architecture design (access, authorization, data security, open-source software security)\n- threat modeling - analysis to identify risks and attack vectors, and to specify the security controls that must be folded into the design that will be implemented","controls":null},{"name":"Requirements and Documentation (create knowledge)","slug":"sdlc-documentation","body":"All \u003cVar keyName=\"companyName\"/\u003e products are using automation for generating Documentation, Guides, and API References. This is accomplished by adding `annotations` to classes, functions, methods, variables, and any other software primitive that needs it. Narratives are included around continuous integration and continuous delivery so that the path \u003cVar keyName=\"companyName\"/\u003e's code takes from development to staging to production is clear. This verbose documentation helps current and future team members, users, customers, and partners align with the company's established way of doing development, and also makes an auditor's job easier. \u003cVar keyName=\"companyName\"/\u003e uses:\n\n- [OpenAPI](https://www.openapis.org/) to generate API References\n- [Swagger](https://swagger.io/) as Interface Description Language for describing RESTful APIs expressed using JSON.\n\n\nExample of `Golang` code annotations for automatic API Specs generation:\n\n```golang\n// @title Business API\n// @version 3.0\n// @description This is a sample Gin server\n// @termsOfService https://companyDomain.tld/terms/\n\n// @contact.name API Support\n// @contact.url https://companyDomain.tld/support\n// @contact.email developers@companyDomain.tld\n\n// @license.name Apache 2.0\n// @license.url http://www.apache.org/licenses/LICENSE-2.0.html\n\n// @host api.companyDomain.tld\n// @BasePath /v2\n\npackage docs\n\nimport \"gitlab.com/cyscale/swagger-automation/api\"\n\n// swagger:route POST /foobar foobar-tag idOfFoobarEndpoint\n// Foobar does some amazing stuff.\n// responses:\n//   200: foobarResponse\n\n// This text will appear as description of your response body.\n// swagger:response foobarResponse\ntype foobarResponseWrapper struct {\n // in:body\n Body api.FooBarResponse\n}\n```","controls":null},{"name":"Coding Standards","slug":"sdlc-coding","body":"\u003cVar keyName=\"companyName\"/\u003e uses git integrated with a ticketing solution. This allows \u003cVar keyName=\"companyName\"/\u003e to maintain a high standard for the code it produces, but also to provide traceability. These systems are also used for code reviews, code verifications, and code signing.\n\nSecurity training is provided before access to Source Code Repositories (see [Security Training and Awareness Policy](/policies/security-training-awareness/show)).\n\nAll development is done following these rules:\n\n- access to Source Code Repositories is done only by authentication with your \u003cVar keyName=\"companyName\"/\u003e unique identification;\n- authentication can be done by unique identification + password or by using an SSH key pair;\n- commits are made in a dedicated branch named with the *ticket/issue number* and the *title* of the ticket;\n- commit messages must follow the [Conventional Commits Open Standard](https://www.conventionalcommits.org/);\n- each feature branch must enter the CI phase for *Unit Testing* and *Integration Testing*;\n- Merge Requests (MR)/Pull Requests (PR) are created using git;\n- commits are reviewed by peers, automation tools, and the engineering manager for that project.\n\n- `main` is the **ONLY** branch which will be promoted to production:\n  - main branch cannot be deleted;\n  - commits to the main branch are restricted;\n  - Merge Requests (MR)/Pull Requests (PR) can be merged into `main` only with the approval and after all the builds in the request are successful;\n  - new feature/defect/bug author must merge the approved branch into the `main` branch.","controls":null},{"name":"Release and Deployment","slug":"sdlc-release","body":"More info about the release and deployment to production can be found in the [Software Release Process](/policies/software-release-deployment/show?active=release-process).","controls":null},{"name":"Open Source and 3rd Party Libraries","slug":"sdlc-oss","body":"Open-source software is a rapidly growing market because every user has access to the respective programming code, can audit what the code's functionality is, and can edit the code to fit specific requirements. The majority of technologies used at \u003cVar keyName=\"companyName\"/\u003e are under the Apache 2.0 license which allows for use, modification, and distribution of the open-source technologies, as long as references are included in the license header.\n\n\u003cVar keyName=\"companyName\"/\u003e Security Team is responsible for creating and maintaining an up-to-date software inventory of all open-source software dependencies, as well as scanning for issues and security vulnerabilities. Development Teams are responsible for either selecting a secure OSS or fixing any problems before deployment to production. In the end, any licensing issues discovered in 3rd Party software or libraries must be properly addressed.\n\n`Dependency-check`, `Dependency-track`, and `Snyk` are used at \u003cVar keyName=\"companyName\"/\u003e for open source software licensing and vulnerabilities identification.\n\n#### Open Source Software Inventory\n\n| License     | OSS Software      |\n|-------------|-------------------|\n| Apache 2.0  | Kubernetes        |\n| Apache 2.0  | Docker            |\n| Apache 2.0  | Gitlab            |\n| Apache 2.0  | Jenkins           |\n| Apache 2.0  | OpenVPN           |\n| Apache 2.0  | VS Code           |\n| Apache 2.0  | Elasticsearch     |\n| Apache 2.0  | SonarQube         |\n| Apache 2.0  | Dependency-track  |\n| Apache 2.0  | Dependency-check  |\n| GNU         | Go (lang)         |\n| GNU         | MariaDB           |\n| GNU         | MongoDB           |\n| GNU         | Redis             |\n| GPL         | Ubuntu 18.04      |","controls":null},{"name":"Security Testing and Validation (verify)","slug":"sdlc-testing","body":"\u003cVar keyName=\"companyName\"/\u003e Test Strategy will adhere to the DevOps SDLC methodology. Most of the security testing and validation can be performed using the `security-tools` container image or by using CI/CD pipeline steps.\n\nDefinitions:\n\n- Secrets Detection - API keys, database credentials, and security certificates\n- Dependency Scanning\n- SAST - Static Application Security Testing or *white box testing*\n- DAST - Dynamic Application Security Testing\n- RASP - Run-time Application Self Protection\n- IaC - Infrastructure as Code\n\nBased on this methodology, any project will have the following:\n\n| Testing Category      | Environment | Responsible(s)  | Tool(s)                               |\n|-----------------------|-------------|-----------------|---------------------------------------|\n| Unit                  | Dev         | Developers      | Jest, Go                              |\n| Code coverage         | Dev         | Developers      | Mocha, SonarQube                      |\n| Integration           | Dev         | Developers      | Language-specific                     |\n| IaC Scanning          | Dev         | Developers      | Checkov by BridgeCrew                 |\n| Secrets Detection     | Dev         | Developers      | GitGuardian                           |\n| SAST                  | QA          | CI              | SonarQube, Snyk, White Source         |\n| RAST                  | QA          | CI              | Sqreen, SonarQube, Snyk               |\n| Application (\u0026 DAST)  | Dev         | Developers      | OWASP ZAP, Nikto, Contrast Security   |\n| End-to-End            | QA          | CI              | Selenium, Katalon Studio, Appium      |\n| Performance           | Stage       | CI              | Prometheus, Grafana, ElasticStack     |\n| Vulnerability Scan    | Stage       | Security        | OpenVAS, Nikto, Clair, Anchore        |\n| Penetration Testing   | Stage       | Security        | OWASP ZAP, Zenmap, Kali Linux         |\n| UAT                   | Prod        | QA/PM           | -                                     |\n| Production smoke      | Prod        | CI              | Postman, Fiddler                      |\n\n\u003e \u003cVar keyName=\"companyName\"/\u003e engineering and security teams will apply the appropriate combination of tools depending upon the target programming language, architecture, and the execution run-time. These tools are a combination of internally developed, vendor purchased, and open-source tools. As supporters of the [OWASP Foundation](https://owasp.org)'s initiative, \u003cVar keyName=\"companyName\"/\u003e uses many of the security tools listed in [OWASP Security Testing Tools](https://owasp.org/www-project-web-security-testing-guide/v42/6-Appendix/A-Testing_Tools_Resource) and [OWASP Vulnerability Scanning Tools](https://owasp.org/www-community/Vulnerability_Scanning_Tools) webpages.","controls":null},{"name":"Security Assurance Maturity Model (SAMM)","slug":"sdlc-samm","body":"The SDL describes the \"what\" of software security. \u003cVar keyName=\"companyName\"/\u003e's Security Maturity Model describes the \"how well\" of software security.\n\nFor each SDL activity, the SAMM describes 5 different levels from 0-4. In the end, a radar chart must be created as a statement of how well the new product, software, service, or tool performs under security stress.\n\n0. None\n0. Minimal [Initial]\n0. Good [Basic]\n0. Better [Acceptable]\n0. Best [Mature]","controls":null},{"name":"Monitor and Review (audit)","slug":"sdlc-review","body":"The Software Development Life Cycle doesn't end with the deployment to production. Changes must be monitored constantly to ensure proper operation. Bugs and defects discovered in Production must be reported and responded to, which often feeds work back into the process. Bug fixes may not flow through the entire cycle, however, at least an abbreviated process is necessary to ensure that the fix does not introduce other problems (known as a regression), or doesn't affect **Protected** data in Production environments.\n\nMetrics are captured using monitoring and logging such as Prometheus and Grafana to calculate deltas (before and after deployments).","controls":null}]}